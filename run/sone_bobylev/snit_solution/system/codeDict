/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2;
    format      ascii;
    class       dictionary;
    location    "system";
    object      codeDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

thermalCreepFixedValue
{
    code
    #{
        scalar kn, a4, k0;
        db().lookupObject<IOdictionary>("nondimensionalProperties").lookup("kn") >> kn;
        db().lookupObject<IOdictionary>("knudsenLayerProperties").lookup("a4") >> a4;
        db().lookupObject<IOdictionary>("knudsenLayerProperties").lookup("k0") >> k0;
        const fvPatchField<scalar>& T0 = patch().lookupPatchField<volScalarField, scalar>("T0");
        const fvPatchField<vector>& U1 = patch().lookupPatchField<volVectorField, vector>("U1");
        const symmTensorField tang = I - sqr(patch().nf());
        volTensorField _grad2T0 = fvc::grad(fvc::grad(db().lookupObject<volScalarField>("T0")));
        vectorField grad2T0n = _grad2T0.boundaryField()[patch().index()] & patch().nf();
        const volScalarField& p0 = db().lookupObject<volScalarField>("p0");
        scalar p0_ = getRefCellValue(p0, 0);
        scalar relax = patch().boundaryMesh().mesh().fieldRelaxationFactor("U")/kn;
        scalar k = kn*sqrt(constant::mathematical::pi)/2;
        (*this)== relax*(U1 + ( tang & (a4*sqrt(T0)*grad2T0n + k0*snGrad()) ) * k*T0/p0_) + (1-relax)*(*this);
    #};
    codeInclude
    #{
        #include "fvCFD.H"              // need for fvc::grad
    #};
    codeOptions
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude
    #};
}

temperatureJumpFixedValue
{
    code
    #{
        scalar kn, d1, d3, K1;
        dimensionedScalar gamma2_;
        db().lookupObject<IOdictionary>("nondimensionalProperties").lookup("kn") >> kn;
        db().lookupObject<IOdictionary>("knudsenLayerProperties").lookup("d1") >> d1;
        db().lookupObject<IOdictionary>("knudsenLayerProperties").lookup("d3") >> d3;
        db().lookupObject<IOdictionary>("knudsenLayerProperties").lookup("K1") >> K1;
        db().lookupObject<IOdictionary>("transportProperties").lookup("gamma2") >> gamma2_;
        scalar gamma2 = gamma2_.value();
        const fvPatchField<scalar>& T0 = patch().lookupPatchField<volScalarField, scalar>("T0");
        const fvPatchField<vector>& U1 = patch().lookupPatchField<volVectorField, vector>("U1");
        const volScalarField& p0 = db().lookupObject<volScalarField>("p0");
        scalar p0_ = getRefCellValue(p0, 0);
        scalar pi = constant::mathematical::pi;
        scalarField grad2T0nn = ( sqr(T0.snGrad()) + (1./K1+4./gamma2)*magSqr(U1)/K1/T0 )/2/T0 + sqr(2*pi)*(1-T0);
        scalar relax = patch().boundaryMesh().mesh().fieldRelaxationFactor("T")/kn;
        scalar k = kn*sqrt(constant::mathematical::pi)/2;
        (*this)== relax*(T0 - (d1*snGrad() + d3*grad2T0nn*k*T0/p0_)*k*T0/p0_) + (1-relax)*(*this);
    #};
    codeInclude
    #{
        #include "fvCFD.H"              // need for getRefCellValue
    #};
    codeOptions
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude
    #};
}

temperature0FixedValue
{
    code
    #{
        scalar alpha;
        db().lookupObject<IOdictionary>("nondimensionalProperties").lookup("alpha") >> alpha;
        scalar pi = constant::mathematical::pi;
        (*this)== 1 - alpha*cos(2*pi*patch().Cf().component(vector::X));
    #};
}

velocity1FixedValue
{
    code
    #{
        scalar alpha, K1;
        db().lookupObject<IOdictionary>("nondimensionalProperties").lookup("alpha") >> alpha;
        db().lookupObject<IOdictionary>("knudsenLayerProperties").lookup("K1") >> K1;
        scalar pi = constant::mathematical::pi;
        tmp<Field<scalar> > T0 = 1 - alpha*cos(2*pi*patch().Cf().component(vector::X));
        tmp<Field<scalar> > dT0 = 2*pi*alpha*sin(2*pi*patch().Cf().component(vector::X));
        Field<vector> U1(patch().Cf().size(), vector::zero);
        U1.replace(vector::X, -K1 * sqrt(T0) * dT0);
        (*this)== U1;
    #};
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
